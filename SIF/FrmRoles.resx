<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOkOAADpDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAyAAAA+wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAACMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACmAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAADQAAAAEQAAABEAAAARAAAAEQAAABEAAADfAAAAMwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuwAAAGAAAAARAAAAEQAAABEAAAARAAAAYAAA
        ALsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAMwAAAAdAAAAzwAAAAAAAAAAAAAAAAAA
        AN0AAAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7AAAAVQAAAAAAAAAAAAAAZwAA
        AIUAAABVAAAAuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAzAAAAAYAAAAvAAAAAAAA
        AAAAAAAAAAAA3QAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALsAAABVAAAAAAAA
        AAAAAAAXAAAAHgAAAFUAAAC7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAADMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADdAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuwAA
        AFUAAAAAAAAAAAAAAAAAAAAAAAAAVQAAALsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAA
        AMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN0AAAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAC7AAAAVQAAAAAAAAAAAAAAAAAAAAAAAABVAAAAuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        gAAAgYBAAAGAAAADwACBA8CBwAfgA+Af+Ac=
</value>
  </data>
</root>