<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AIUAAAAzAAAAMwAAADMAAAB3AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABMAAAAKAAA
        AC8AAAAxAAAALgAAACUAAAAYAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ALsAAAD/AAAAZgAAAAAAAAAAAAAAAAAAAFUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAuwAAAP8AAABmAAAAAAAAAAAAAAAAAAAAHAAAAFUAAABVAAAAVQAAAFUAAABVAAAAVQAA
        AFUAAABVAAAAEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAC7AAAA/wAAAGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAiAAAAIgAAACIAAAAiAAAAN8AAAD/AAAAuAAAAIgAAABJAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAiAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAiAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///AH///AAf/wAAD/8AAAf/AAAH/wAAA8AAAAPAAgADwAIAA8cCCAPHA
        gADx8IAA8cAAAPHAAADxwAAB8cAPgfHAAAPwAAAD8AAAB/AAAB/xwA//8cAP//H///8Af///AH///wB/
        //8Af///AH///wB///8Af///AH///wB///8=
</value>
  </data>
</root>